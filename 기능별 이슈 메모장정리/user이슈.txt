

위치기반으로 거래를 해야한다면 회원가입 때 받은 위치는 항상사용이되는가 ?
내가 사용할 때마다 위치에대한값을 항상 받아야하는건가  ? 

기존설정 위치를 기준으로 벗어났을때에만 위치를 재설정하게 해결하는 방안 .
위치기반 아직 해결못함 
-----------------------------------------------------------------------------------------------




userAPI 개발중 . 사진은 param으로 파일로 받을예정이고 나머지 user에관한 속성값들은
body로 받아서 정보가 유출되지않게 해야할것같음 . 

전역 예외처리핸들러 클래스 작성후 각 예외마다 예외처리를 유연하게할수있게해야함 . 
https://velog.io/@u-nij/Spring-%EC%A0%84%EC%97%AD-%EC%98%88%EC%99%B8-%EC%B2%98%EB%A6%AC-RestControllerAdivce-%EC%A0%81%EC%9A%A9

중복체크는 Id 의 대한 중복체크도 필요하지만 email에 대한 중복체크도 필요하다 . 

아이디에 중복체크처럼 email도 동일하게 하도록 한다 .

중복체크에서 예외가아닌 경우에는 보여줄 메세지와 상태코드를 반환하게끔하고 
예외상황에는 예외를 컨트롤러에 반환 후 반환된 예외를 전역예외컨트롤러에서 가로챈후에 http상태코드와 에러메세지를 객체로 만든 후 반환하도록 한다 .

사진저장 .
사진은 requestParam 어노테이션을 사용하여 사진파일을 파라미터로 직접받는다 (body 에 포함시키지않는다 ) // 0114 수정 body에 보내고 @requestPart를 통해 바디에서의 각 타입에따라 데이터를 받을수있게 수정 완료 

유저뿐만아니라 게시판에도 올리는 사진이 있을예정이기때문에 common 패키지에 FileUploadUtil이라는 클래스를 생성해 사진 디렉토리속 sub디렉토리를 각각 만들어서 프로필사진과 게시판에 사진을 나누어 저장할 수 있게한다 .

프로필 사진은 선택적으로 넣을수있게끔 해놓으려고하는데 만약 설정하지않는다면 기본이미지를 저장해야한다 . 이것에 대한것은 프론트에서 처리해야할지 백엔드에서 처리해야할지 모르겠다 .
// 백엔드에서 if문을 사용해 사진이 없는상태로 들어오게되었을때 기본이미지경로를 dto에 set시켜서 로컬패스에 저장하도록한다 ?//  profilephoto의 값이 null일때 기본사진을 설정하게 로직수정완료 

마이페이지 클릭시 회원정보 , 게시물확인같은 게시판관련 버튼 
프로필사진 ,닉네임 변경 가능  
비밀번호 변경 눌렀을시에 비밀번호 확인 후 변경페이지 렌더링 


// 
20250114
post요청을 보낼때에는 requestparam 보다는 body에 내용을 포함시켜서 보내는것이 바람직하다고 한다 .

reqeustpart를 사용해서 사진파일과 json을 body에 동시에보내고 header에 contenttype을 명시해주어 바디에 포함된 두개의 파일을 보낼수 있다 .
서버측에선 데이터를 각각 받기위해서 reqeustPart 어노테이션을 사용한다 .

사진이 없을때는 서버에서 기본사진을 처리하게끔 로직을 작성하고 사진이 있을때만 값이전달되게끔하며 서버 컨트롤러에서는 필수파라미터가 아니게 설정해준다 .



// 회원가입시에 이메일 인증 


// 전역 예외처리 핸들러 생성  //완료 

중복확인 예외 , - 아이디는중복확인 버튼으로 바로 get요청 
회원가입 버튼클릭시의  이메일 중복체크 예외처리   //완료 

회원가입에 이메일인증번호 생성후 비교하는로직 추가 . 
이메일 인증버튼을 눌렀을시에 true false 반환 .
1번 : 이메일 인증번호 전송 버튼눌렀을시에 난수를 생성후 이메일에 난수를 보내주는 메서드 
2번 : 이메일 인증번호 확인 버튼을 눌렀을시에 1번에서 생성된 난수와 확인버튼을 눌렀을때 전송받은 번호와 일치하는지 확인후 true false를 보내주는 메서드 


이메일 인증번호를 보내기위해서는 JavaMailSender 인터페이스 사용 . 
우리가 사용하는 springboot버전은 3.7.1 버전이기에 gradle 의존성 추가후 인터페이스 import가능 
properties에 보낼 이메일


// 로그인 

로그인 예외 
1: 아이디가 일치하지않습니다 .
2: 비밀번호가 일치하지않습니다 .
처리완료 


2025 0114 마무리 .  
해야할것 
전역예외처리핸들러 메서드 한메서드로 공통된부분 묶어보기 (추후)

이메일 인증하기 만들기  // 완료 2025 0115 
사진 이메일 수정하기 

비밀번호 인코딩 
소셜로그인 회원가입 , jwt , 엑세스토큰과 리프레시토큰 사용방법 , (cookie) http only ,  -> 위치기반설정 만들기 
토큰부터 해결 후 소셜로그인 구현  , 위치기반서비스 사용 
=========================================================

 

2025 0115 마무리 .

내일 해야할것 (숙제)


이메일 인증에서 성공시와 실패시에 ResponseDTO로 돌려주기  // 완료 

실패시에는 전역예외처리기로 반환하게끔하기  //  완료 
비밀번호 인코딩 // 완료

로그인 토큰인증시스템 구현하기 
토큰 생성시 써야할로직들 (spring context에 저장된 인증정보 가져와서 유저아이디받는거 하기 )
소셜로그인 회원가입 api 만들어놓기  소셜로그인 성공시 회원가입에 가져다줄 response 생각해서 만들어놓기 

=======================================================================


2025 0116 
이메일인증에 관련해서 이메일 인증버튼 전송시 인증번호 전송과 <이메일, 인증번호> hashMap을 사용하여 대응하게 저장하였고
<인증번호 , 유효시간> 을 대응하게 저장시켰다 . 

인증번호 확인 버튼을 눌렀을때  이메일과 인증번호가 json객체로 전송되는데
첫번째로 전송받은 이메일을 통해 저장된 이메일이 있는지 먼저 검증하고 없을시에 "입력하신 이메일에 대한 인증번호가 없습니다." 
라는 예외처리를 하였고
이메일에대한 인증번호가 있다면 넘어가게된다 

두번쨰로는 유효시간이 초과됐는지를 검증하는데 
만약 유효시간이 초과됐을경우 각 이메일 ,인증번호를 삭제한다 .
그리고 "인증번호 유효시간이 초과되었습니다 ." 라는 예외처리를한다 .

유효시간이 초과되지 않았을경우 
이메일과 인증번호를 equals() 메서드를 통해 비교하고 반환되는값 (boolean)을 변수에담아
불일치시 "인증번호가 일치하지않습니다" 라는 예외를 던지고
일치했을경우 인증번호와 이메일을 삭제 후 ResponseDTO 객체를 생성해 상태코드와  "인증에 성공하였습니다" 메세지를 클라이언트에 전송한다 .

** 문제점
인증번호 유효시간이 만료되었을경우에 인증번호를 입력하게되면 먼저 위에서 첫번쨰 예외사항에 걸리게된다
분명히 유효시간과 연관없이 첫번쨰 예외처리에서 예외로 던져지지않았을때 밑으로 내려가서 
인증번호와 이메일이 삭제되는 로직인데 왜 5분이 지나면 삭제가 되었을까 ?
유효시간이 만료됐을경우에 메모리를위해  데이터 삭제 스케쥴러 메서드를 작성해놨기때문에 그런거였다  .
1시간뒤에 삭제되게 변경하였기때문에 이제 그런메세지는없다 .ㅅㅂ;  뻘짓했네


** 클라이언트측에서는 상태코드가 200일때에 대한 조건문으로 인증성공했을떄 다음로직을 작성하면 편할것같다 .


이메일 정규식확인에 대한부분은 백엔드에서 처리할수있다 . 
프론트에서 처리하지않는다면 백엔드에서 처리할 수 있도록한다 .

회원가입과 비밀번호 재설정의 이메일 인증은 같은로직을 사용하지만 비밀번호 재설정의 로직에는 email이 존재유무를 확인하는 절차가 필요하다 .
두개의 엔드포인트를 다르게 설정후 비밀번호 재설정로직에는 email의 존재유무를 확인하는 로직을 추가하여 존재한다면 인증번호를 전송하는 로직을 존재하지 않다면 이메일불일치예외를 처리.



**이메일 끝


acceesToken / RefreshToken 

보안을위해 local,session 스토리지를 이용하지않고 httpOnly 쿠키를 사용하여 
토큰을 사용하려고하는데 
https 를 도입시키지않은경우 쿠키를 사용하는거 자체가 보안상 위험한 행위다 .

문제는 https 도입자체가 ㅈㄴ어렵다 ㅅㅂ; 
사설인증서를 발급해야하고
프로그램일 이용해서 로컬환경에서 신뢰된인증서를 만들어야한다 .
로컬을 인증된 발급기관으로 추가해야하고 
로컬환경에 대한 인증서를 만들어야한다 .
생성한 인증서 파일들을 HTTPS 서버에 적용해주는 작업도 필요하다 .
---------------------------------------------------------------------------
20250120
아이디 비밀번호찾기 

아이디는 userService에 메서드를 만들어 이메일을통해 아이디를 반환해준다.
요청 엔드포인트 : localhost:9090/user/findUserId
body에 json객체로 email 필드만 포함해서 요청 
요청예시 :	  axios.post(localhost:9090/user/findUserId , 객체변수 혹은 json객체형식)	
객체예시 :  {
	email : qwert@asdf.com
	  }


비밀번호는 emailService에서 인증번호 전송메서드를 통해 인증번호를 보내주고 검증을하는 이메일인증번호 전송메서드와 인증번호 검증메서드를 재사용후
userService에서 새로운 메서드를 만들어 비밀번호를 재설정하게끔 만들어준다 .



이메일인증로직을 모두 통과후 
비밀번호 재설정 엔드포인트에 RequestBody로 put 요청을 이메일과 비밀번호를 포함해서 전송해야함 




메모장 이슈정리 
각 기능별 알기쉽게 정리하고 토큰관련 끝내고  .회원정보수정 소셜로그인 어떻게할지 구상하고 위치정보서비스 도입하기 
https 선택사항 


 **JWT 01-23 

token provider 클래스를 만들었다 .
accessToken과 refreshToken을 모두 사용예정이고 
로그인시에 서비스계층에 로그인메서드에서 access토큰은 responseDTO를통해서 반환예정이고
refresh토큰은 userEntity에 먼저 저장해주고 httpOnly쿠키를 생성해 쿠키에 refresh토큰을 저장후 클라이언트에게 다시 반환해준다 .

java servlet api를 사용해서 Cookie와 httpservletResponse를 사용할 수 있게 해주었다 .
Cookie 객체를 만들수있게되었고  refreshToken을 포함하여  HTTP 응답헤더에 쿠키를 포함할 수 있게하였다 .

이제 accessToken을 Json객체에 포함하여 응답본문에 실어서 보낼 수 있게되었다 ..

추가로 해야할일은 AccessToken의 유효시간(15분) 이만료되었을때 refreshToken을 통해 AccessToken을 재발급하는 로직을 어디에 사용해야하는지 알아야하고 
RefreshToken이 만료되었을때 어떻게 재발급을 해야할지도 생각해야한다 .
토큰발급시에 생기는 예외에대한 처리도 필요하다 .



클라이언트는 요청시 헤더에 	authorization : Bearer <AccessToken>을 포함하여 요청을 보낸다
accessToken이 유효한경우 : 응답반환

만료되었거나 유효하지않은경우 : 401 Unauthorized 반환 .
클라이언트가 "토큰재발급API호출 (RefreshToken 자동전송)
서버에서 RefreshToken 검증후 새로운 AccessToken 발급 

클라이언트가 새로발급받은 AccessToken으로 원래요청 다시시도 
서버에서 요청 처리후 응답반환 .

이방법을 사용하는것이 권장되지만 이해가되지않는부분은

사용자 - 클라이언트 - 서버 이런식의 요청응답구조가 이루어져있는데
accessToken이 만료된경우 클라이언트가 재요청을 하려면 사용자는 어떤화면을 받아보게되는건지 ? 

클라이언트가 401을 받았을떄에 로직처리를 사용자가 인지하지못하게끔 투명하게 처리해야한다 .
401응답을받았을때 refreshToken을이용해 Access토큰을 재발급받는 API에 요청을하고 원래 하려던 요청을 재요청해야한다 .
이안에서의 예외사항은 refreshToken도 만료되었을경우를 생각해야하고 이때 refreshToken을 재발급받는 로직도 필요하다 . 

그렇다면 나 (서버) 는 성공에 대한 응답과 refreshToken이 만료되었을때의 응답과 accessToken이 만료되었을떄의 응답에서 상태코드를 통한 구분과 알맞는 예외메세지 필요하고
클라이언트는 상태코드를통해 성공(200) AceessToken만료(401) refreshToken만료(403) 에 대한 처리를 요청메서드에서 각각
조건을통해 처리할 수 있게끔하면
사용자에 시점에서 매끄러운 처리가 가능하다 .



servletContainer의 동작원리를 이해해야함 .

HttpServletResponse는 HTTP응답헤더와 상태코드를 직접 설정할 수 있다 .
ResponseEntity 는 HTTP응답본문(body) 과 상태코드를 반환하는데 사용된다 .
 두객체는 서로 독립적으로 동작하며
HttpservletResponse에 추가된 쿠키나 헤더는 별도로 반환하지않아도 클라이언트로 자동 전송된다 .
이는 SpringBoot와 서블릿컨테이너의 역할이다 .


------------------------------------------------------------------------------------------------
현재 로그인시 access토큰은 정상적으로 ResponseDTO에 포함되어 반환하고있고
refreshToken은 쿠키에 저장되어 잘 반환되고있다 . 

그럼이제 access토큰을 헤더에 포함시켜서 요청했을때에 대한 메서드가 필요하다 .

access토큰을 헤더에 포함시켜서 controller에 userInfo 엔드포인트에 get요청을 보냈을때 
@AuthenticationPrincipal 어노테이션을통해 스프링의 securityContext에 저장된 Authentication 객체에서 principal 값을 가져온다 . 
securityContext에 userId가 저장되게끔 하는것이 우선이다 .


0123 마무리
filter 작업중 securityConfig 클래스 수정필요함 . 
bean등록할줄모름 . 



-------------------------------------------------------------------------------------------------------------

0124 회의 

현재상황
흐름
securityConfig 통합 1번째 


오류 : 이메일 인증버튼클릭시 유효하지않은 이메일 전송하면 예외처리 필요함 
이부분은 userInfo로 사용할예정임 .

2번쨰 토큰 만료시에대한 예외처리 

3번째 refresh 토큰을 통한 access토큰 재발급API


---------------------------------------------------------------------------
securityConfig 작성중 SecurityContext 에 userDetails 객체 vs userId 저장하는것에 대한것

관리자 권한을 가진 계정인지 사용자권한을 가진 계정인지 구분이 필요하다면 userDetails객체를 사용하는것이 적합하나 , 
우리는 계정 권한에대해 따로 사용하지않기때문에 굳이 userDetails 객체를 사용할필요가없다 . 
userDetails 객체를 사용해야하는상황이라면 우리가 커스텀클래스를 만들어야할수도있고 기존클래스를 확장해야한다 .
인증로직이 복잡해질수도있고 불필요한 데이터가 포함될수도있다 . (모든요청에서 userDretails 객체가 로드되므로 사용하지 않는 데이터까지 포함될수있다 . ) 이를 막기위해 커스텀클래스를 더 복잡하게 작성해야할수도있다 .

userId만 사용하는 jwtFilter와 securityConfig 작성완료 .





TODO :
access만료시 refresh토큰을통한 access토큰 재발급  // 완료  
refresh토큰 만료시점에대해서 . 어떻게 알수있는지 공부필요함 (토큰의 exp를 통해 만료시점알수있음 )
소셜로그인 도입 , (filter 필요함 ) config 수정 
naverAPI location 회원가입에 도입 .
소셜로그인 사용자에대한 데이터처리 구성
DB설계



refreshToken을 이용한 accessToken 재발급 .
refreshToken은 access토큰처럼 로그인시 발급되고 로그아웃시 삭제된다 .
그렇다는건 로그인이 15일동안 지속되고 그이후에 만료가된다는뜻이다 .

클라이언트(front-end)는 accessToken만료시간을 서버에서 전송한 accessToken의 exp를 추출하여 토큰의 만료시간 설정 .


refreshToken을통한 access토큰 발급은 클라이언트가 AuthController의 "/auth/refresh-token" 엔드포인트로 헤더에 쿠키를담아 요청하면 서버는
accessToken을 재발급후 클라이언트에게 Json객체의 accessToken 속성에 재발급된토큰을담아 응답한다 .  
refreshToken이 유효하지않거나 만료되었을경우 서버는  "refreshToken이 유효하지않습니다 ." 라는 예외를던지고 전역예외처리핸들러는 이를 클라이언트에 Json객체로 401상태코드와 에러메세지를 응답한다 .



TODO : 로그아웃메서드 (리프레쉬토큰을 db에서 삭제해야함 .)
사진 업로드는되지만 , 클라이언트에 사진전달이 안되는중 . 

문제점이 정확하게는 무엇인지 모르겠지만 . 
가능성있는 문제점은 config파일에 
addResourceLocations() 에 명시된 경로가 상대경로이기떄문에 생기는문제일 가능성이있다 . 
.addResourceLocations("file:/uploads/")
이었던 부분을  
.addResourceLocations("file:" + System.getProperty("user.dir") + "/uploads/"); 
registry.addResourceHandler("/default/**")
.addResourceLocations("classpath:/static/default/");
이렇게 변경하고 
filterChain의 
requestMatchers("/user/**",).permitAll() 
이 부분의 사진폴더 접근이 가능하게 
requestMatchers("/user/**","/uploads/**",/default/**).permitAll() 이렇게 변경. 
해결완료 


로그아웃메서드와  사진전달에대한 오류해결 완료 


location 도입


내위치 설정하기 버튼 회원가입시에 생성 
HTML5 geoLocation을통한 실시간 위치정보얻기 가능 .
하지만 https와같은 보안컨텍스트에서만 작동 .. localhost환경에서는 예외적으로 정상적 사용이 가능한경우가있음 .

https 설정을 springboot에 한다하더라도 실제로 위치를 요청하는환경은 localhost3000 (리액트 개발서버 ) 이기떄문에 springboot의 locathost9090 서버에 https를 도입하는것은 크게 의미가없다 .








