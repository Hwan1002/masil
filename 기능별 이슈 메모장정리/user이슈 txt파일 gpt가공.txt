1. 위치 기반 서비스
이슈
회원가입 시 받은 위치 정보를 항상 사용할 것인지, 또는 사용 시마다 현재 위치를 받아야 하는지 고민.
기존 설정된 위치에서 벗어났을 때만 위치를 재설정하는 방안 필요.
해결 방안
위치 저장 로직:
회원가입 시 초기 위치 정보를 저장.
사용자가 특정 범위를 벗어나지 않는 한 기존 위치를 유지.
위치 재설정 로직:
사용자의 현재 위치를 주기적으로 확인.
기존 위치와 비교하여 설정된 범위를 벗어난 경우에만 위치를 업데이트하도록 구현.


2. 사용자 API
사진 업로드
초기 계획: @RequestParam으로 사진 파일을 파라미터로 받음.
수정: @RequestPart를 사용해 JSON과 사진 파일을 동시에 body에 포함하여 전송.
헤더에 Content-Type: multipart/form-data 명시.
서버에서 사진이 없을 경우 기본 이미지를 설정하는 로직 추가.
파일 저장 구조
공통 패키지에 FileUploadUtil 클래스 생성.
사진 저장 디렉토리를 분리:
프로필 사진: /profile_photos/
게시판 사진: /board_photos/


3. 회원가입 및 인증
중복 확인
아이디와 이메일 중복 확인 로직 추가.
중복 확인 성공 시 메시지와 상태 코드를 반환.
예외 상황은 전역 예외 처리 핸들러에서 처리.
이메일 인증
인증번호 전송:
난수를 생성해 이메일로 전송.
<이메일, 인증번호> 및 <인증번호, 유효시간>을 HashMap에 저장.
인증번호 확인:
이메일과 인증번호가 일치하는지 검증.
유효시간 초과 시 데이터 삭제 및 예외 처리.


4. 로그인
예외 처리
아이디 불일치 시: "아이디가 일치하지 않습니다."
비밀번호 불일치 시: "비밀번호가 일치하지 않습니다."
JWT 토큰 인증 시스템
AccessToken과 RefreshToken 생성 및 관리.
HTTP Only 쿠키를 사용해 보안 강화 (HTTPS 환경 권장).


5. 비밀번호 찾기
이메일 인증 로직 재사용:
이메일로 인증번호 전송 및 검증.
비밀번호 재설정:
인증 성공 후 새로운 비밀번호를 설정하는 API 제공.


6. 마이페이지 기능
회원 정보 조회 및 게시물 확인 버튼 추가.
프로필 사진과 닉네임 변경 가능.
비밀번호 변경 시 기존 비밀번호 확인 후 변경 페이지 렌더링.


7. 전역 예외 처리 핸들러
공통 예외 처리를 위한 클래스 작성 완료.
각 예외 상황에 맞는 메시지와 HTTP 상태 코드를 반환하도록 구현.
추후 공통된 부분을 한 메서드로 묶어 리팩토링 예정.


8. 소셜 로그인
계획
소셜 로그인 성공 시 회원가입 API와 연동될 응답 데이터 설계 필요.
JWT 토큰 발급과 함께 소셜 로그인 사용자 관리를 위한 로직 추가 예정.


9. HTTPS 도입 (선택 사항)
이슈
HTTPS 환경에서 HTTP Only 쿠키 사용 권장.
사설 인증서 발급 및 로컬 환경에서 신뢰된 인증서를 생성하는 과정 복잡.
해결 방안 (추후 작업 예정)
로컬 환경에서 신뢰된 인증서 생성 및 적용 방법 연구.
HTTPS 서버 설정 완료 후 테스트 환경 구축.


10. 기타 개선 사항
문서화 필요성
작업 내용을 체계적으로 기록하기 위해 기능별 문서화 진행 필요.
문제 정의, 해결 과정, 결과를 명확히 기술.
팀 협업 시 참고할 수 있는 중앙화된 문서 작성 고려.